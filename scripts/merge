#!/bin/bash

usage () {
  printf 1>&2 "%s\n" "Usage: $0 NEW MAIN [-c CONFIG]

  Merges NEW metadir into MAIN

  OPTIONS:
  -c json file which contains the schema of properties and relations between them
     defaults to \$PWD/metadir.json

  EXAMPLE:
    $0 \"../ops/inbox\" \"./metadir\" > index.json"
}

OPTIND=1
while getopts 'c:' opt; do
  case $opt in
    c) config="$OPTARG" ;;
    *) usage
       exit 1
  esac
done
shift "$(( OPTIND - 1 ))"

if [ $# -ne 2 ]; then
  usage
  exit 3
fi

new="$1"
main="$2"

# get the path to the json file which contains
# the schema of properties and relations between them
if [ ! "$config" ]; then
    config="$PWD/metadir.json"
fi

# check if config exists
if [[ ! -f "$config" ]]; then
  printf 1>&2 "No config at %s\n" "$config"
  exit 3
fi

# TODO support several roots
# find a property that doesn't have a parent, treat as root
# if there are several matching properties, pick the first in alphabetical order
root=$(jq -r 'map_values(select(has("parent") | not)) | keys[0]' "$config")
# if there are no matching properties, exit with an error
if [ ! "$root" ]; then
  printf 1>&2 "No root property in the config %s\n" "$config"
  exit 3
fi

# get the list of all property names as a space-separated string
config_props=$(jq -r 'keys | join(" ")' "$config")

# remove changed entries from main
# and only then append changed entries from new
update_file () {
    csvpath="$1"

    # printf 1>&2 "update: %s\n" "$csvpath"
    if [ -f "$new/$csvpath" ]; then
        changed_lines=$(mktemp)
        if [ -f "$main/$csvpath" ]; then
            comm -23 <(cat "$new/$csvpath" | sort | uniq) <(cat "$main/$csvpath" | sort) > "$changed_lines"
        else
            cp "$new/$csvpath" "$changed_lines"
        fi
        # cmd > mktemp and then <(cat | cmd) replaces <(printf $(cmd) | cmd)
        # to fix an inconsistent bug that corrupts multibyte characters
        # other times bug is fixed by setting the right locale
        changed_uuids=$(mktemp)
        cat "$changed_lines" | cut -c 1-64 > "$changed_uuids"
        # use grep because ripgrep bugs out on an empty pattern file
        # https://github.com/BurntSushi/ripgrep/issues/1332
        unchanged_lines=$(mktemp)
        cat "$main/$csvpath" 2>/dev/null | grep -vf "$changed_uuids" > "$unchanged_lines"
        # remove empty newline in case unchanged_lines is empty
        mkdir -p "$main/$(dirname "$csvpath")"
        cat "$unchanged_lines" <(cat "$changed_lines" | sort | uniq) 2>/dev/null | sed '/^$/d' > "$main/$csvpath"
    else
        # printf 1>&2 "skip %s\n" "$csvpath"
        :
    fi
}

export -f update_file

read -r -a props <<< "$config_props"
for prop in "${props[@]}"; do
    prop_type=$(jq -r ".$prop.type" "$config")
    # hash has no index
    if [ "$prop_type" != "hash" ]; then
        prop_dir=$(jq -r ".$prop.dir" "$config")
        if [ ! "$prop_dir" ] || [ "$prop_dir" == "null" ]; then
            prop_dir="$prop"
        fi
        # update index
        update_file "props/$prop_dir/index.csv"
    fi
    # TODO support recursive root
    # root has no pair
    if [ "$prop" != "$root" ]; then
        parent=$(jq -r ".$prop.parent" "$config")
        # update pair
        update_file "pairs/$parent-$prop.csv"
    fi
done
