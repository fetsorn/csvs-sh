#!/bin/bash

usage () {
  printf 1>&2 "%s\n" "Usage: $0 [-c CONFIG] [-d METADIR]

  Deduplicates, sorts,
  and removes garbage from METADIR

  EXAMPLE:
    $0"
}

OPTIND=1
while getopts 'c:d:' opt; do
  case $opt in
    c) config="$OPTARG" ;;
    d) metadir="$OPTARG" ;;
    *) usage
       exit 1
  esac
done
shift "$(( OPTIND - 1 ))"

# get the path to the folder which contains
# the index of properties and relations between them
if [ ! "$metadir" ]; then
    metadir="$PWD/metadir"
fi

# check if metadir exists
if [[ ! -d "$metadir" ]]; then
  printf 1>&2 "No metadir at %s\n" "$metadir"
  usage
  exit 3
fi

# get the path to the json file which contains
# the schema of properties and relations between them
if [ ! "$config" ]; then
    config="$PWD/metadir.json"
fi

# check if config exists
if [[ ! -f "$config" ]]; then
  printf 1>&2 "No config at %s\n" "$config"
  usage
  exit 3
fi

# TODO support several roots
# find a property that doesn't have a parent, treat as root
# if there are several matching properties, pick the first in alphabetical order
root=$(jq -r 'map_values(select(has("parent") | not)) | keys[0]' "$config")
# if there are no matching properties, exit with an error
if [ ! "$root" ]; then
  printf 1>&2 "No root property in the config %s\n" "$config"
  usage
  exit 3
fi

# get the list of all property names as a space-separated string
config_props=$(jq -r 'keys | join(" ")' "$config")

# usage: gc CSVFILE RGFILE
# Removes from CSVFILE all keys which are not in RGFILE
_gc () {
    csvfile="$1"
    rgpattern="$2"

    printf 1>&2 "gc: %s\n" "$csvfile"

    # hangs if csvfile is empty
    if [ -s "$csvfile" ]; then
        cat "$csvfile" | rg -f <(printf "%s" "$rgpattern") | sort | uniq | sort -t "," -k 2 -k 1 | sponge "$csvfile"
    fi
}

export -f _gc

read -r -a props <<< "$config_props"

declare -Ag _
for prop in "${props[@]}"; do
    _[$prop,"parent"]=$(jq -r ".$prop.parent" "$config")
    _[$prop,"type"]=$(jq -r ".$prop.type" "$config")
    _[$prop,"dir"]=$(jq -r ".$prop.dir" "$config")
done

declare -A processed

# deduplicate and sort root prop
root_index="$metadir/props/$root/index.csv"
if [ -f "$root_index" ]; then
    _gc "$root_index" ".*"
fi
processed["$root"]=1

while (( ${#props[@]} != 0 )); do
    # get the last element of queue
    prop=${props[-1]}
    # get its parent property
    parent=${_[$prop,"parent"]}
    if [ ${processed[$prop]} ] || [ ! "$parent" ]; then
        # if processed or has no parent
        # remove from queue
        unset -v 'props[-1]'
    elif [ ${processed[$parent]} ]; then

        parent_props="$metadir/props/$parent/index.csv"
        if [ -f "$parent_props" ]; then
            parent_uuids=$(cat "$parent_props" | cut -c 1-64)

            prop_pair="$metadir/pairs/$parent-$prop.csv"
            if [ -f "$prop_pair" ]; then
                _gc "$prop_pair" "$parent_uuids"
            fi
        fi

        prop_type=$(jq -r ".$prop.type" "$config")
        if [ "$prop_type" != "hash" ]; then

            parent_pair="$metadir/pairs/$parent-$prop.csv"
            if [ -f "$parent_pair" ]; then
                prop_uuids=$(cat "$parent_pair" | cut -c 66-)

                prop_dir=$(jq -r ".$prop.dir" "$config")
                if [ ! "$prop_dir" ] || [ "$prop_dir" == "null" ]; then
                    prop_dir="$prop"
                fi

                prop_index="$metadir/props/$prop_dir/index.csv"
                if [ -f "$prop_index" ]; then
                    _gc "$prop_index" "$prop_uuids"
                fi
            fi

        fi
        processed["$prop"]=1
        # remove from queue
        unset -v 'props[-1]'
    else
        # remove from queue
        unset -v 'props[-1]'
        # if parent has not been processed
        # add itself and parent to queue
        props=( "${props[@]}" "$prop" "$parent" )
    fi
done
